name: 'Fontend CD'
on:
  workflow_dispatch:
  push:
    branches:
      - master

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Node.js 
        uses: actions/setup-node@v3
        with:
          node-version: latest

      - name: Cache npm
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-npm
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ env.cache-name }}-${{ hashFiles('**/starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-${{ env.cache-name }}-

      - name: Install dependencies
        run: |
          cd starter/frontend && npm ci

      - name: Lint
        run: |
          cd starter/frontend && npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Node.js 
        uses: actions/setup-node@v3
        with:
          node-version: latest

      - name: Restore cache
        uses: actions/cache@v3
        env:
          cache-name: cache-npm
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ env.cache-name }}-${{ hashFiles('**/starter/frontend/package-lock.json') }}

      - name: Install dependencies
        run: |
          cd starter/frontend && npm ci

      - name: Run tests
        id: test
        run: |
          cd starter/frontend && npm test
  
  build-and-deploy:
    needs: [lint, test]
    runs-on: ubuntu-latest
    steps:
        - name: Checkout
          uses: actions/checkout@v3
  
        - name: Set up Node.js 
          uses: actions/setup-node@v3
          with:
            node-version: latest
  
        - name: Restore cache
          uses: actions/cache@v3
          env:
            cache-name: cache-npm
          with:
            path: ~/.npm
            key: ${{ runner.os }}-npm-${{ env.cache-name }}-${{ hashFiles('**/starter/frontend/package-lock.json') }}
  
        - name: Install dependencies
          run: |
            cd starter/frontend
            npm ci
  
        - name: Build
          if: steps.lint.outcome == 'success' && steps.test.outcome == 'success'
          run: |
            cd starter/frontend
            npm run build

        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
           aws-session-token: ${{secrets.AWS_SESSION_TOKEN}}
           aws-region: us-east-1
          
        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1
          with:
            mask-password: 'true'
    
        - name: Build, tag, and push docker image to Amazon ECR
          env:
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            REPOSITORY: frontend
            IMAGE_TAG: ${{ github.sha }}
            REACT_APP_MOVIE_API_URL: https://E0E891CF267A72AA138453D0A00EF19E.gr7.us-east-1.eks.amazonaws.com
          run: |
            cd starter/frontend
            docker build --build-arg=REACT_APP_MOVIE_API_URL=$REACT_APP_MOVIE_API_URL -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
            docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        
        - name: Deploy to cluster
          env:
            REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            REPOSITORY: frontend
            IMAGE_TAG: ${{ github.sha }}
          run: |
            cd starter/frontend/k8s
            aws eks --region us-east-1 update-kubeconfig --name cluster
            kustomize edit set image backend=$REGISTRY/$REPOSITORY:$IMAGE_TAG
            kustomize build | kubectl apply -f -
